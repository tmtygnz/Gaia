//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Updates = newUpdatesTable("public", "updates", "")

type updatesTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	UpdateLog     postgres.ColumnString
	UpdateVersion postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UpdatesTable struct {
	updatesTable

	EXCLUDED updatesTable
}

// AS creates new UpdatesTable with assigned alias
func (a UpdatesTable) AS(alias string) *UpdatesTable {
	return newUpdatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UpdatesTable with assigned schema name
func (a UpdatesTable) FromSchema(schemaName string) *UpdatesTable {
	return newUpdatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UpdatesTable with assigned table prefix
func (a UpdatesTable) WithPrefix(prefix string) *UpdatesTable {
	return newUpdatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UpdatesTable with assigned table suffix
func (a UpdatesTable) WithSuffix(suffix string) *UpdatesTable {
	return newUpdatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUpdatesTable(schemaName, tableName, alias string) *UpdatesTable {
	return &UpdatesTable{
		updatesTable: newUpdatesTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newUpdatesTableImpl("", "excluded", ""),
	}
}

func newUpdatesTableImpl(schemaName, tableName, alias string) updatesTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		UpdateLogColumn     = postgres.StringColumn("update_log")
		UpdateVersionColumn = postgres.FloatColumn("update_version")
		allColumns          = postgres.ColumnList{IDColumn, UpdateLogColumn, UpdateVersionColumn}
		mutableColumns      = postgres.ColumnList{UpdateLogColumn, UpdateVersionColumn}
	)

	return updatesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		UpdateLog:     UpdateLogColumn,
		UpdateVersion: UpdateVersionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
