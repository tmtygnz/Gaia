//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EmailWhitelist = newEmailWhitelistTable("public", "email_whitelist", "")

type emailWhitelistTable struct {
	postgres.Table

	// Columns
	ID     postgres.ColumnInteger
	Email  postgres.ColumnString
	Rights postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmailWhitelistTable struct {
	emailWhitelistTable

	EXCLUDED emailWhitelistTable
}

// AS creates new EmailWhitelistTable with assigned alias
func (a EmailWhitelistTable) AS(alias string) *EmailWhitelistTable {
	return newEmailWhitelistTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmailWhitelistTable with assigned schema name
func (a EmailWhitelistTable) FromSchema(schemaName string) *EmailWhitelistTable {
	return newEmailWhitelistTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmailWhitelistTable with assigned table prefix
func (a EmailWhitelistTable) WithPrefix(prefix string) *EmailWhitelistTable {
	return newEmailWhitelistTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmailWhitelistTable with assigned table suffix
func (a EmailWhitelistTable) WithSuffix(suffix string) *EmailWhitelistTable {
	return newEmailWhitelistTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmailWhitelistTable(schemaName, tableName, alias string) *EmailWhitelistTable {
	return &EmailWhitelistTable{
		emailWhitelistTable: newEmailWhitelistTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newEmailWhitelistTableImpl("", "excluded", ""),
	}
}

func newEmailWhitelistTableImpl(schemaName, tableName, alias string) emailWhitelistTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		EmailColumn    = postgres.StringColumn("email")
		RightsColumn   = postgres.IntegerColumn("rights")
		allColumns     = postgres.ColumnList{IDColumn, EmailColumn, RightsColumn}
		mutableColumns = postgres.ColumnList{EmailColumn, RightsColumn}
	)

	return emailWhitelistTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Email:  EmailColumn,
		Rights: RightsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
