//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Places = newPlacesTable("public", "places", "")

type placesTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnInteger
	AreaName postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PlacesTable struct {
	placesTable

	EXCLUDED placesTable
}

// AS creates new PlacesTable with assigned alias
func (a PlacesTable) AS(alias string) *PlacesTable {
	return newPlacesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlacesTable with assigned schema name
func (a PlacesTable) FromSchema(schemaName string) *PlacesTable {
	return newPlacesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlacesTable with assigned table prefix
func (a PlacesTable) WithPrefix(prefix string) *PlacesTable {
	return newPlacesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlacesTable with assigned table suffix
func (a PlacesTable) WithSuffix(suffix string) *PlacesTable {
	return newPlacesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlacesTable(schemaName, tableName, alias string) *PlacesTable {
	return &PlacesTable{
		placesTable: newPlacesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newPlacesTableImpl("", "excluded", ""),
	}
}

func newPlacesTableImpl(schemaName, tableName, alias string) placesTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		AreaNameColumn = postgres.StringColumn("areaName")
		allColumns     = postgres.ColumnList{IDColumn, AreaNameColumn}
		mutableColumns = postgres.ColumnList{AreaNameColumn}
	)

	return placesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		AreaName: AreaNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
