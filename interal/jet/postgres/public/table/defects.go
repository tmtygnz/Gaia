//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Defects = newDefectsTable("public", "defects", "")

type defectsTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	Placeid           postgres.ColumnInteger
	Product           postgres.ColumnInteger
	EncodedBy         postgres.ColumnString
	Date              postgres.ColumnTimestampz
	DefectDescription postgres.ColumnString
	Quantity          postgres.ColumnInteger
	DefPrebTp         postgres.ColumnInteger
	IsDev             postgres.ColumnBool
	Packaging         postgres.ColumnInteger
	AppVersion        postgres.ColumnFloat
	DateEncoded       postgres.ColumnTimestampz
	Batch             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DefectsTable struct {
	defectsTable

	EXCLUDED defectsTable
}

// AS creates new DefectsTable with assigned alias
func (a DefectsTable) AS(alias string) *DefectsTable {
	return newDefectsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DefectsTable with assigned schema name
func (a DefectsTable) FromSchema(schemaName string) *DefectsTable {
	return newDefectsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DefectsTable with assigned table prefix
func (a DefectsTable) WithPrefix(prefix string) *DefectsTable {
	return newDefectsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DefectsTable with assigned table suffix
func (a DefectsTable) WithSuffix(suffix string) *DefectsTable {
	return newDefectsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDefectsTable(schemaName, tableName, alias string) *DefectsTable {
	return &DefectsTable{
		defectsTable: newDefectsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newDefectsTableImpl("", "excluded", ""),
	}
}

func newDefectsTableImpl(schemaName, tableName, alias string) defectsTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		PlaceidColumn           = postgres.IntegerColumn("placeid")
		ProductColumn           = postgres.IntegerColumn("product")
		EncodedByColumn         = postgres.StringColumn("encodedBy")
		DateColumn              = postgres.TimestampzColumn("date")
		DefectDescriptionColumn = postgres.StringColumn("defectDescription")
		QuantityColumn          = postgres.IntegerColumn("quantity")
		DefPrebTpColumn         = postgres.IntegerColumn("defPrebTp")
		IsDevColumn             = postgres.BoolColumn("isDev")
		PackagingColumn         = postgres.IntegerColumn("packaging")
		AppVersionColumn        = postgres.FloatColumn("app_version")
		DateEncodedColumn       = postgres.TimestampzColumn("dateEncoded")
		BatchColumn             = postgres.StringColumn("batch")
		allColumns              = postgres.ColumnList{IDColumn, PlaceidColumn, ProductColumn, EncodedByColumn, DateColumn, DefectDescriptionColumn, QuantityColumn, DefPrebTpColumn, IsDevColumn, PackagingColumn, AppVersionColumn, DateEncodedColumn, BatchColumn}
		mutableColumns          = postgres.ColumnList{PlaceidColumn, ProductColumn, EncodedByColumn, DateColumn, DefectDescriptionColumn, QuantityColumn, DefPrebTpColumn, IsDevColumn, PackagingColumn, AppVersionColumn, DateEncodedColumn, BatchColumn}
	)

	return defectsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Placeid:           PlaceidColumn,
		Product:           ProductColumn,
		EncodedBy:         EncodedByColumn,
		Date:              DateColumn,
		DefectDescription: DefectDescriptionColumn,
		Quantity:          QuantityColumn,
		DefPrebTp:         DefPrebTpColumn,
		IsDev:             IsDevColumn,
		Packaging:         PackagingColumn,
		AppVersion:        AppVersionColumn,
		DateEncoded:       DateEncodedColumn,
		Batch:             BatchColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
